#!/bin/bash
source buffermaker
## Example of buffermaker tui program

add-mode testui
	:: '[left]' format-left
	:: '[up]' format-up
	:: '[right]' format-right
	:: '[down]' format-down
	:: RET link-enter
	:: C-c die
	:: "$(kbd k)" previous-line
	:: "$(kbd j)" next-line
	:: "$(kbd l)" forward-char
	:: "$(kbd h)" backward-char
	mode-options
		:: else :

declare-buffer counter
bf_d+=(
	[line]=5
	[column]=0
	[info]="Testui"
	[mode]=testui
	[filetype]='format'
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)

function inc {
	((incnum++))
	make-render-line 3
	redraw
}

function dec {
	((incnum--))
	make-render-line 3
	redraw
}

function show-more {
	buffer[7]="${buffer[6]}"
	buffer[6]='More: '\
'<o> id: setnum select: set-number redraw right: obj menu left: : up: show-less down: show-less '\
'text: <f> link Set number </f> '\
'</o> '\
'<o> id: menu select: menu zero right: obj close left: obj setnum up: show-less down: show-less '\
'text: <f> menu menu </f> '\
'</o> '\
'<o> id: close select: show-less left: obj menu right: : up: show-less down: show-less '\
'text: <f> light-red x </f> '\
'</o>'
	make-render-area 6 7
	redraw
	obj close
}
function show-less {
	buffer[6]="${buffer[7]}"
	unset buffer[7]
	make-render-area 6 7
	redraw
	obj more
}

incnum=0

zero=(
	text: Menu
		face: menu-highlight
	text: Zero
		cmd: number-set 0
	text: One
		cmd: number-set 1
	text: Ten
		cmd: number-set 10
	text: Hundred
		cmd: number-set 100
	text: Thousand
		cmd: number-set 1000
	text: Million
		cmd: number-set 1000000
		face: menu-divider
	text: Close
		cmd: menu.exit
	text: Quit
		cmd: die
)
menu.add zero


function number-set {
	menu.exit
	incnum="$1"
	make-render-line 3
	redraw
}
	
buffer=(
''
'<f> divider <lp> &line x/2-s/2 <h> Super number counter </h> </lp> <x> <lp> &line x/2-s[-2]/2 </lp> </f>'
''
'<-> <f> highlight &bold-line <v> incnum &bold-line </f>'
''
# controls
'<o> id: inc select: inc redraw right: obj dec left: : up: : down: obj quit '\
'text: <f> link Increase </f> '\
'</o> '\
'<o> id: dec select: dec left: obj inc right: obj more up: : down: obj next '\
'text: <f> link Decrease </f> '\
'</o> '\
'<o> id: more select: show-more left: obj dec right: : up: : down: obj next '\
'text: <f> title ... </f> '\
'</o>'
# quit button
'<o> id: quit select: die right: obj next left: : down: : up: obj inc text: <f> red Quit </f> </o> '\
'<o> id: next select: next-test right: : left: obj quit down: : up: obj dec text: <f> link Next </f> </o>'
)

################################################################################
#                              Format section                                  #
################################################################################
version_lenght=${#buffermaker_version}
function next-test {
	set-buffer formats
	redraw
}
declare-buffer formats
bf_d+=(
	[line]=1
	[column]=0
	[mode]=testui
	[filetype]='format'
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
''
'<lp> - 0 '\
'<o> id: previous select: previous-test text: <f> link Previous </f> </o> </lp> <x> '\
'<f> divider <lp> &line x/2-s/2-s[-2] <h> Formating </h> </lp> <x> '\
'<lp> &line x/2-s[-2]/2-version_lenght+2 </lp> <x> '\
'<f> hint <v> buffermaker_version </f> </f> '
'<o> id: next select: next-multi text: <f> link Next test </f> </o>'
"<-> This is a showcase of Buffermaker's integrated formating language."
''
'<-> <\> <lp> (left-pad), <\> <f> (face), <\> <h> (header), <\> <x> (delete-last), <\> (escape) showcase:'
''
'<f> divider &angle-down-right <x> <lp> &line 16*6 </lp> <x> &angle-down-left </f>'
'<f> divider &column </f> <lp> &space 0 <h> pseudo-Table </h> </lp> <x> '\
'<lp> &space 16*6-s[-2] <f> divider &column </f> </lp>'
'<f> divider &column <x> <lp> &space 16*6 &column </lp> </f>'
'<f> divider &column </f> <f> title '\
'<lp> &space 0 id </lp> '\
'<lp> &space 16-s[-2] number </lp> '\
'<lp> &space 16-s[-2] amount </lp> '\
'<lp> &space 16-s[-2] cost </lp> '\
'<lp> &space 16-s[-2] date </lp> '\
'<x> <lp> &space 32-s[-2] <f> divider &column </f> </lp> '\
'</f>'
)
for i in {0..16}; do
	buffer+=(
"<f> divider &column </f> <lp> &space 0 $RANDOM <f> dim random </f> </lp> "\
"<lp> &space 16-s[-2] $RANDOM </lp> "\
"<lp> &space 16-s[-2] ${RANDOM}% </lp> "\
"<lp> &space 16-s[-2] \$$RANDOM </lp> "\
"<lp> &space 16-s[-2] $RANDOM/$RANDOM/$RANDOM </lp> "\
'<x> <lp> &space 32-s[-2] <f> divider &column </f> </lp>'
	)
done
buffer+=(
'<f> divider &angle-up-right <x> <lp> &line 16*6 &angle-up-left </lp> </f>'
''
'<divider>'
'<h> Color list </h> <i-tab>'
'<f> red * Red </f>'
'<f> yellow * Yellow </f>'
'<f> green * Green </f>'
'<f> cyan * Cyan </f>'
'<f> blue * Blue </f>'
'<f> magenta * Magenta </f>'

'<f> light-red * </f> '\
'<f> light-yellow L </f> <x> <f> light-green i </f> <x> <f> light-cyan g </f> <x> <f> light-blue h </f> <x> <f> light-magenta t </f> '\
'<f> light-red r </f> <x> <f> light-yellow a </f> <x> <f> light-green i </f> <x> <f> light-cyan n </f> <x> '\
'<f> light-blue b </f> <x> <f> light-magenta o </f> <x> <f> light-red w </f>'
'</i> <x> <divider>'
''
'<f> red <lp> &space x/6 </lp> <x> &bold-angle-down-right <x> <lp> &bold-line x/3*2 </lp> <x> &bold-angle-down-left </f>'
'<f> red <lp> &space x/6 </lp> <x> &bold-column </f> <lp> &space 0 <h> Boxes </h> </lp> <x> '\
'<lp> &space x/3*2-s[-2] <f> red &bold-column </lp> </f>'
'<f> red <lp> &space x/6 </lp> <x> &bold-column </f> <lp> &space 0 * Text1 </lp> <x> '\
'<lp> &space x/3*2-s[-2] <f> red &bold-column </lp> </f>'
'<f> red <lp> &space x/6 </lp> <x> &bold-column </f> <lp> &space 0 * Text2 </lp> <x> '\
'<lp> &space x/3*2-s[-2] <f> red &bold-column </lp> </f>'
'<f> red <lp> &space x/6 </lp> <x> &bold-column </f> <lp> &space 0 * Text3 </lp> <x> '\
'<lp> &space x/3*2-s[-2] <f> red &bold-column </lp> </f>'
'<f> red <lp> &space x/6 </lp> <x> &bold-angle-up-right <x> <lp> &bold-line x/3*2 </lp> <x> &bold-angle-up-left </f>'
''
'<divider>'
'<h> Links </h>'
''
'<-> <link> die : Quit </link> (using <\> <link>)'
'<-> <a> die : <f> hint Quit </f> </a> (using <\> <a>)'
'<-> <o> id: testlink select: die text: <f> highlight Quit </f> </o> (using <\> <o>)'
'<f> divider <divider> </f>'

)

function previous-test {
	set-buffer counter
	redraw
}
################################################################################
#                          Multi buffer example                                #
################################################################################
function next-multi {
	set-buffer mbackground
	redraw
	set-buffer mlist_title
	redraw
	set-buffer mlist
	redraw
}
declare-buffer mbackground
bf_d+=(
	[line]=1
	[column]=0
	[mode]=testui
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
''
'<f> hint <lp> &space x/2-s/2 Multi buffer test </lp> </f>'
)
declare-buffer mlist_title
bf_d+=(
	[loc-y]=4
	[loc-x]=4
	[size-x]=$((COLUMNS/2-8))
	[size-y]=$((LINES/2-8))
	[line]=1
	[column]=0
	[mode]=testui
	[background]=background-highlight
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
''
'<f> <v> bf_d[background] <lp> &space x/2-s/2 Multi buffer test </lp> </f>'
)
declare-buffer mlist
bf_d+=(
	[loc-y]=5
	[loc-x]=4
	[size-x]=$((COLUMNS/2-8))
	[size-y]=$((LINES/2-9))
	[line]=1
	[column]=0
	[mode]=testui
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
	''
	''
	'item1'
	'item2'
	'item3'
)


################################################################################
#                          Final rendering                                     #
################################################################################
stty -echo
hooks[die]='stty echo'

set-buffer counter
load-default-config
init-var
redraw
obj next
input-loop
